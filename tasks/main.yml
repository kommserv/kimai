---
- name: Required packages present
  apt:
    pkg:
      - git
      - gnupg
      - pwgen
    state: present
  tags:
    - kimai

# Additional checks on the following variables could be added
- name: Check that all the variables needed are defined
  assert:
    that:
      - kimai_user is defined
      - kimai_home is defined
      - kimai_version is defined
      - kimai_app_env is defined
      - kimai_dbuser is defined
      - kimai_dbpass is defined
      - kimai_dbhost is defined
      - kimai_dbport is defined
      - kimai_dbname is defined
      - ( kimai_docroot is defined ) and ( kimai_docroot | basename == "public" )
  tags:
    - kimai

- name: Check what the latest version of Kimai is
  include_tasks: version.yml
  tags:
    - kimai

- name: "Check if the Kimai {{ kimai_user }} user account exists"
  shell: "id {{ kimai_user }} && echo PRESENT || echo ABSENT"
  check_mode: false
  register: kimai_user_check
  changed_when: '"no such user" in kimai_user_check.stderr'
  tags:
    - kimai

- name: Only install or upgrade Kimai if the user account exists
  block:

    - name: GitHub GPG key present
      copy:
        src: files/github.asc
        dest: "{{ kimai_home }}/private/github.asc"
      become_user: "{{ kimai_user }}"

    - name: GitLab GPG public key imported
      command: "gpg --import {{ kimai_home }}/private//github.asc"
      register: kimai_gpg_import
      changed_when: '"not changed" not in kimai_gpg_import.stderr'
      check_mode: false
      become_user: "{{ kimai_user }}"

    - name: Add Kimai console to PATH in ~/.bashrc
      lineinfile:
        path: "{{ kimai_home }}/.bashrc"
        line: 'export PATH="{{ kimai_docroot | dirname }}/bin:${HOME}/bin:${PATH}"'
        regexp: '^export PATH='
        create: true

    - name: Check if Kimai is installed and if it is which version is installed
      shell: bin/console --no-ansi -n kimai:version || echo ABSENT
      args:
        chdir: "{{ kimai_docroot | dirname }}"
      register: kimai_install_check
      become_user: "{{ kimai_user }}"

    # stdout is in the form: Kimai 2 - 1.6.1 stable (Ayumi) by Kevin Papst and contributors.
    - name: Set a variable for the installed version
      set_fact:
        kimai_installed: "{{ kimai_install_check.stdout.split(' ')[3] }}"
      when: ( kimai_install_check is defined ) and ( "ABSENT" not in kimai_install_check.stdout )

    - name: Clone Kimai git repo
      block:

        - name: DocumentRoot public directory absent
          file:
            path: "{{ kimai_docroot }}"
            state: absent

        - name: Kimai git repo present
          git:
            repo: https://github.com/kevinpapst/kimai2.git
            dest: "{{ kimai_docroot | dirname }}"
            version: "{{ kimai_version }}"
            depth: 1
            clone: true
            update: true
            force: true
            verify_commit: true
          become_user: "{{ kimai_user }}"

        - name: Composer install
          composer:
            command: install
            working_dir: "{{ kimai_docroot | dirname }}"
            optimize_autoloader: true
            no_dev: true
          become_user: "{{ kimai_user }}"

      when: ( kimai_install_check is defined ) and ( "ABSENT" in kimai_install_check.stdout )
      tags:
        - kimai

    - name: Kimai app secret present
      shell: "pwgen -n 75 1 > {{ kimai_docroot | dirname }}/app_secret.txt"
      args:
        creates: "{{ kimai_docroot | dirname }}/app_secret.txt"
      become_user: "{{ kimai_user }}"

    - name: Slurp a base64 encoded version of the app secret
      slurp:
        src: "{{ kimai_docroot | dirname }}/app_secret.txt"
      register: kimai_app_secret_b64encoded

    - name: Decode and set a fact based on the app secret file contents
      set_fact:
        kimai_app_secret: "{{ kimai_app_secret_b64encoded['content'] | b64decode | trim }}"

    - name: .env present
      template:
        src: templates/env.j2
        dest: "{{ kimai_docroot | dirname }}/.env"
        owner: "{{ kimai_user }}"
        group: "{{ kimai_group | default(kimai_user) }}"
        mode: 0640

    - name: Install Kimai
      block:

        - name: Install Kimai
          command: bin/console --no-ansi -n kimai:install
          args:
            chdir: "{{ kimai_docroot | dirname }}"
          register: kimai_install
          failed_when: ( "Successfully installed Kimai 2 version {{ kimai_version }} " not in kimai_install.stdout )
          become_user: "{{ kimai_user }}"

      when: ( kimai_install_check is defined ) and ( "ABSENT" in kimai_install_check.stdout )
      tags:
        - kimai

    - name: "Update Kimai when {{ kimai_version }} is less than {{ kimai_installed }}"
      block:

        - name: "Kimai git repo updated to version {{ kimai_version }}"
          git:
            repo: https://github.com/kevinpapst/kimai2.git
            dest: "{{ kimai_docroot | dirname }}"
            version: "{{ kimai_version }}"
            depth: 1
            clone: true
            update: true
            force: false
            verify_commit: true
          become_user: "{{ kimai_user }}"

        - name: "Update Kimaii from version {{ kimai_installed }} to version {{ kimai_version }}"
          command: bin/console --no-ansi -n kimai:update
          args:
            chdir: "{{ kimai_docroot | dirname }}"
          register: kimai_update
          failed_when: ( "Successfully updated Kimai 2 version {{ kimai_version }} " not in kimai_update.stdout )
          become_user: "{{ kimai_user }}"

      when:
        - ( kimai_version is defined ) and ( kimai_installed is defined )
        - ( kimai_installed is version(kimai_version, '<') )

    - name: A update is available
      debug:
        msg: "Kimai version {{ kimai_installed }} is installed and the latest version available is {{ kimai_latest }}, update the kimai_version variable to upgrade"
      when:
        - ( kimai_latest is defined ) and ( kimai_installed is defined )
        - ( kimai_installed | int is version(kimai_latest, '<') )

  when: ( kimai_user_check is defined ) and ( "no such user" not in kimai_user_check.stderr )
  tags:
    - kimai
...
