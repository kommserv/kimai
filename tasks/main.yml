---
- name: Required packages present
  apt:
    pkg:
      - git
      - gnupg
      - pwgen
    state: present
  tags:
    - kimai

- name: Check that all the variables needed are defined
  assert:
    that:
      - kimai_user is defined
      - kimai_home is defined
      - kimai_version is defined
      - ( kimai_docroot is defined ) and ( kimai_docroot | basename == "public" )
  tags:
    - kimai

- name: Check what the latest version of Kimai is
  include_tasks: version_check.yml
  tags:
    - kimai

- name: "Check if the Kimai {{ kimai_user }} user account exists"
  shell: "id {{ kimai_user }} && echo PRESENT || echo ABSENT"
  check_mode: false
  register: kimai_user_check
  changed_when: '"no such user" in kimai_user_check.stderr'
  tags:
    - kimai

- name: Only install or upgrade Kimai if the user account exists
  block:

    - name: GitHub GPG key present
      copy:
        src: files/github.asc
        dest: "{{ kimai_home }}/private/github.asc"
      become_user: "{{ kimai_user }}"

    - name: GitLab GPG public key imported
      command: "gpg --import {{ kimai_home }}/private//github.asc"
      register: kimai_gpg_import
      changed_when: '"not changed" not in kimai_gpg_import.stderr'
      check_mode: false
      become_user: "{{ kimai_user }}"

    - name: DocumentRoot public directory absent
      file:
        path: "{{ kimai_docroot }}"
        state: absent

    - name: Kimai git repo present
      git:
        repo: https://github.com/kevinpapst/kimai2.git
        dest: "{{ kimai_docroot | dirname }}"
        version: "{{ kimai_version }}"
        depth: 1
        clone: true
        update: true
        force: true
        verify_commit: true
      become_user: "{{ kimai_user }}"

    - name: Composer install
      composer:
        command: install
        working_dir: "{{ kimai_docroot | dirname }}"
        optimize_autoloader: true
        no_dev: true
      become_user: "{{ kimai_user }}"

    - name: Add Kimai console to PATH in ~/.bashrc
      lineinfile:
        path: "{{ kimai_home }}/.bashrc"
        line: 'export PATH="{{ kimai_docroot | dirname }}/bin:${HOME}/bin:${PATH}"'
        regexp: '^export PATH='
        create: true

    - name: Kimai app secret present
      shell: "pwgen -n 75 1 > {{ kimai_docroot | dirname }}/app_secret.txt"
      args:
        creates: "{{ kimai_docroot | dirname }}/app_secret.txt"
      become_user: "{{ kimai_user }}"

    - name: Slurp a base64 encoded version of the app secret
      slurp:
        src: "{{ kimai_docroot | dirname }}/app_secret.txt"
      register: kimai_app_secret_b64encoded

    - name: Decode and set a fact based on the app secret file contents
      set_fact:
        kimai_app_secret: "{{ kimai_app_secret_b64encoded['content'] | b64decode | trim }}"  

    - name: .env present
      template:
        src: templates/env.j2
        dest: "{{ kimai_docroot | dirname }}/.env"
        owner: "{{ kimai_user }}"
        group: "{{ kimai_group | default(kimai_user) }}"
        mode: 0640

    - name: Install Kimai
      command: bin/console kimai:install -n
      args:
        chdir: "{{ kimai_docroot | dirname }}"
      become_user: "{{ kimai_user }}"

  when: ( kimai_user_check is defined ) and ( "no such user" not in kimai_user_check.stderr )
  tags:
    - kimai
...
