---

# note: we cannot count on the LXD container having write access
# to the backup dir on BAY
# BUT we can safely assume that the Ansible controller has such write access

- name: Timestamp this backup
  ansible.builtin.set_fact:
    # iso8601_basic_short should look like 20220122T223743
    this_backup_timestamp: "{{ ansible_date_time.iso8601_basic_short }}"

- name: Set backup folder name
  ansible.builtin.set_fact:
    this_backup_name: "kimai-{{ this_backup_timestamp }}"

- name: Set temporary backup directory
  ansible.builtin.set_fact:
    this_backup_tmp: "{{ ansible_env.HOME }}/.cache/{{ this_backup_name }}"


- name: Backup www-root
  block:

    # https://docs.ansible.com/ansible/latest/collections/ansible/posix/synchronize_module.html
    # https://serverfault.com/a/717382
    # note: this task does not register destination path, only changed, cmd, failed, msg, rc
    # this task can fail in interesting ways:
    - name: Copy the Kimai www-root to controller
      ansible.posix.synchronize:
        src: "{{ kimai_repo }}/"
        dest: "{{ this_backup_tmp }}/"
        # in pull mode the remote host in context is the source
        mode: pull
        archive: yes
        copy_links: yes # follow symlinks


    - name: Tasks delegated to localhost
      delegate_to: localhost
      become: true
      become_user: "{{ ansible_env.USER }}"
      block:

        - name: Compress the temporary backup
          community.general.archive:
            path: "{{ this_backup_tmp }}/"
            dest: "{{ this_backup_tmp }}.tgz"
          register: this_backup_compressed

        # note that become_user is necessary, otherwise "permission denied" errors
        - name: "Create the backup target directory {{ this_backup_name }}"
          ansible.builtin.file:
            path: "{{ backup_root_path }}/hosts/{{ ansible_hostname }}/{{ this_backup_name }}"
            state: directory
            owner: "{{ ansible_env.USER }}"
            group: "{{ ansible_env.USER }}"

        # https://www.decodingdevops.com/ansible-copy-file-locally/
        # we use delegate_to to effectively copy from localhost to localhost
        # become_user was necessary, otherwise task fails with permissions error
        - name: Backup the compressed Kimai www-root archive
          ansible.builtin.copy:
            src: "{{ this_backup_compressed.dest }}"
            dest: "{{ backup_root_path }}/hosts/{{ ansible_hostname }}/{{ this_backup_name }}/kimai-v{{ kimai_version }}.tgz"

        - name: Clean up the temporary backup
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ this_backup_tmp }}"
            - "{{ this_backup_compressed.dest }}"
      # END OF BLOCK
  # END OF BLOCK


- name: Backup database
  block:

    - name: "Set where database dump will be temporarily saved"
      ansible.builtin.set_fact:
        this_backup_database_dump: "{{ ansible_env.HOME }}/backups/{{ kimai_dbname }}-{{ this_backup_timestamp }}.sql.gz"

    # I don't see that the Ansible module mysql_db can replace this command
    # note: dumps db and compresses on-the-fly before saving to disk
    # When using the default InnoDB engine, it is important to use the `--single-transaction` flag
    # https://mariadb.com/kb/en/mariadb-backups-overview-for-sql-server-users
    # https://mysqldump.guru/run-mysqldump-without-locking-the-tables.html
    # https://stackoverflow.com/a/41704768
    # https://serverfault.com/q/231300
    # In light of the above links, and the fact that we are using InnoDB engine, I decided to
    # add --single-transaction and remove --lock-tables (and explicitly add --skip-lock-tables)
    # NOTE: this dump command must not be used with MyISAM databases, it expects InnoDB engine!
    - name: Backup (mysqldump) Kimai database
      ansible.builtin.shell: >
        mysqldump --single-transaction --skip-lock-tables --default-character-set=utf8mb4
        -u {{ kimai_dbuser }} -p{{ kimai_dbpass }}
        {{ kimai_dbname }} | gzip > {{ this_backup_database_dump }}
      no_log: true

    # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fetch_module.html
    # unless the database is compressed, this fetch takes forever (even with compression it takes a while)
    - name: Copy the compressed database to backup directory on BAY
      ansible.builtin.fetch:
        src: "{{ this_backup_database_dump }}"
        dest: "{{ backup_root_path }}/hosts/{{ ansible_hostname }}/{{ this_backup_name }}/kimai-v{{ kimai_version }}.sql.gz"
        flat: yes

    - name: "Remove the dump from {{ ansible_hostname }}"
      ansible.builtin.file:
        path: "{{ this_backup_database_dump }}"
        state: absent
  # END OF BLOCK
